{"version":3,"sources":["data/dataStore.js","framework/render.js","data/animeSearchAPI.js","data/animeData.js","components/Header.js","components/SearchInpurSortForm.js","components/ApplyButtonSortForm.js","components/SortForm.js","components/Card.js","components/Footer.js","components/CardsList.js","components/AnimeCardsResults.js","components/App.js","script.js"],"names":["dataStore","currentTitle","isDataLoading","error","cashOfAnimeSearch","Component","Target","renderApp","componentFunction","targetElementId","document","querySelector","innerHTML","animeTitles","allowedTitles","Object","values","getAnimeSearchUrl","search","filter","animeTitle","toLowerCase","join","replace","isCurrentTitleDataLoaded","window","validateAndLoadData","map","anime","includes","Promise","resolve","url","fetch","then","response","json","data","results","length","performSearch","catch","finally","Header","styles","header","headerH1","SearchInputSortForm","ApplyButtonSortForm","formButton","SortForm","sectionForm","sortForm","blockSearch","Card","card","mal_id","cardImgContainer","cardImg","image_url","title","cardItemContainer","cardItemH3","cardItemRating","score","cardItemText","synopsis","cardButton","Footer","footer","githubProfile","githubProfileLink","email","CardsList","animeSearch","form","forms","value","main","cardsItems","rated","AnimeCardsResults","content","paragraphOfState","App"],"mappings":"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","file":"script.b3901c50.js","sourceRoot":"..\\src","sourcesContent":["const dataStore = {\n  currentTitle: '',\n  isDataLoading: false,\n  error: null,\n  cashOfAnimeSearch: {},\n};\n\nexport default dataStore;\n","let Component, Target;\n\nexport default function renderApp(componentFunction, targetElementId) {\n  if (componentFunction) Component = componentFunction;\n  if (targetElementId) Target = targetElementId;\n  document.querySelector(Target).innerHTML = Component();\n}\n","const animeTitles = ['One Piece', 'Tokyo Ghoul', 'Naruto'];\nexport const allowedTitles = Object.values(animeTitles);\n\nexport function getAnimeSearchUrl(search) {\n  const checkTitle = allowedTitles.filter(animeTitle => animeTitle.toLowerCase() === search.toLowerCase());\n  const stringToUrl = checkTitle.join().replace(/\\s+/g, '');\n  return `https://api.jikan.moe/v3/search/anime?q=${stringToUrl}&page=1`;\n}\n","import { allowedTitles, getAnimeSearchUrl } from './animeSearchAPI';\n\nexport function isCurrentTitleDataLoaded() {\n  const { cashOfAnimeSearch, currentTitle } = window.dataStore;\n  return cashOfAnimeSearch[currentTitle];\n}\n\nexport function validateAndLoadData() {\n  const { currentTitle } = window.dataStore;\n\n  if (!allowedTitles.map(anime => anime.toLowerCase()).includes(currentTitle.toLowerCase())) {\n    const error = `Please, enter one of the anime titles: ${allowedTitles.join(', ')}.`;\n    return Promise.resolve({ error });\n  }\n\n  const url = getAnimeSearchUrl(currentTitle);\n  if (!isCurrentTitleDataLoaded()) {\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.results.length === 0) {\n          const error = `No results were found for \"${currentTitle}\". \n          Make sure the request was submitted without errors.`;\n          return Promise.resolve({ error });\n        }\n        return { data };\n      });\n  }\n\n  return Promise.resolve({});\n}\n\nexport function performSearch(animeTitle) {\n  window.dataStore.currentTitle = animeTitle;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n  window.renderApp();\n\n  window\n    .validateAndLoadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.cashOfAnimeSearch[animeTitle] = data.results;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Happened some error.';\n    })\n    .finally(() => {\n      window.renderApp();\n    });\n}\n","import styles from '../css/style.css';\n\nexport default function Header() {\n  return `<header class=\"${styles.header}\">\n            <h1 class=\"${styles.headerH1}\" title=\"* read like Tsundoku\">積ん読 *</h1>\n          </header>`;\n}\n","import styles from '../css/style.css';\n\nexport default function SearchInputSortForm() {\n  return `<input \n                class=\"${styles.search}\"\n                id=\"search\" \n                type=\"text\"\n                name=\"search\"\n                value=\"${window.dataStore.currentTitle}\"\n                onchange=\"window.performSearch(this.value)\"\n                autofocus\n          />`;\n}\n","import styles from '../css/style.css';\n\nexport default function ApplyButtonSortForm() {\n  return `<button class=\"${styles.formButton}\" \n                  id=\"formButton\" \n                  type=\"button\" \n                  name=\"searchButton\">\n                    Click me!\n            </button>`;\n}\n","import styles from '../css/style.css';\nimport SearchInputSortForm from '../components/SearchInpurSortForm';\nimport ApplyButtonSortForm from '../components/ApplyButtonSortForm';\n\nexport default function SortForm() {\n  return ` <div class=\"${styles.sectionForm}\">\n              <form class=\"${styles.sortForm}\" id=\"sortForm\" name=\"sortForm\" onsubmit=\"return false;\">\n                <div class=\"${styles.blockSearch}\">\n                  ${SearchInputSortForm()}\n                  ${ApplyButtonSortForm()}\n                </div>\n              </form>\n            </div>`;\n}\n","import styles from '../css/style.css';\n\nexport default function Card(card) {\n  return `<div class=\"${styles.card}\" id=\"${card.mal_id}\">\n            <div class=\"${styles.cardImgContainer}\">\n              <img class=\"${styles.cardImg}\" src=\"${card.image_url}\" alt=\"${card.title} poster\" />\n            </div>\n            <div class=\"${styles.cardItemContainer}\">\n              <h3 class=\"${styles.cardItemH3}\">${card.title}</h3>\n              <span class=\"${styles.cardItemRating}\">${card.score} / 10</span>\n              <p class=\"${styles.cardItemText}\">${card.synopsis}</p>\n              <button class=\"${styles.cardButton}\">More</button>\n            </div>\n          </div>`;\n}\n","import styles from '../css/style.css';\n\nexport default function Footer() {\n  return `<footer class=\"${styles.footer}\">\n            <p class=\"${styles.githubProfile}\"><a class=\"${styles.githubProfileLink}\" href=\"https://github.com/smillims\">GitHub Profile Author's</a></p>\n            <p class=\"${styles.email}\">If you have any recommendations: danil.liashchenko.uk@gmail.com</p>\n          </footer>`;\n}\n","import styles from '../css/style.css';\nimport Card from './Card';\nimport Footer from './Footer';\n\nexport default function CardsList(animeSearch) {\n  const form = document.forms.sortForm;\n  const search = form.search.value;\n  return `<main class=\"${styles.main}\">\n            <div class=\"${styles.cardsItems}\" id=\"cardsItems\">\n              ${animeSearch\n                .filter(anime => {\n                  if (anime.rated === 'Rx') return false;\n                  else if (!anime.title.toLowerCase().includes(search.toLowerCase())) return false;\n                  return true;\n                })\n                .map(card => Card(card))\n                .join('')}\n            </div>\n          </main>\n          ${Footer()}`;\n}\n","import styles from '../css/style.css';\nimport { allowedTitles } from '../data/animeSearchAPI';\nimport { isCurrentTitleDataLoaded } from '../data/animeData';\nimport CardsList from './CardsList';\n\nexport default function AnimeCardsResults() {\n  const { currentTitle, isDataLoading, error } = window.dataStore;\n\n  let content = ``;\n  if (currentTitle === '') {\n    content = `<p class=\"${styles.paragraphOfState}\">Good day (or evening)!\n    <br></br>\n    At the moment you could search just some of titles: ${allowedTitles.join(', ')}.</p>`;\n  } else {\n    if (isDataLoading) {\n      content = 'Loading...';\n    }\n\n    if (error !== null) {\n      content = error;\n    }\n\n    if (isCurrentTitleDataLoaded()) {\n      content = `${CardsList(isCurrentTitleDataLoaded())}`;\n    }\n  }\n\n  return `<p class='${styles.paragraphOfState}'>${content}</p>`;\n}\n","import Header from '../components/Header';\nimport SortForm from '../components/SortForm';\nimport AnimeCardsResults from '../components/AnimeCardsResults';\n\nexport default function App() {\n  return `${Header()}\n          ${SortForm()}\n          ${AnimeCardsResults()}`;\n}\n","import dataStore from './data/dataStore';\nimport renderApp from './framework/render.js';\nimport { performSearch, validateAndLoadData } from './data/animeData';\nimport App from './components/App';\n\nwindow.dataStore = dataStore;\n\nwindow.renderApp = renderApp;\nwindow.performSearch = performSearch;\nwindow.validateAndLoadData = validateAndLoadData;\n\nrenderApp(App, '#app');\n"]}